{"version":3,"sources":["helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/AddCategory.js","GifExpertApp.js","index.js"],"names":["getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","useState","loading","state","setState","useEffect","then","imgs","useFetchGifs","AddCategory","setCategories","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yRAAaA,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sD,eCaLO,EAVK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAE9B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKA,UAAU,cAAcC,IAAKf,EAAKgB,IAAKN,IAC5C,mBAAGI,UAAU,aAAb,SAA2BJ,QCkBxBO,G,MArBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EAEZoB,mBAAS,CAC/Bb,KAAM,GACNc,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAkBtC,OAXAC,qBAAU,WACNzB,EAAQC,GACHyB,MAAK,SAAAC,GACFH,EAAS,CACLhB,KAAMmB,EACNL,SAAS,SAItB,CAACrB,IAEGsB,EDd2BK,CAAa3B,GAAjCa,EAFgB,EAEtBN,KAAcc,EAFQ,EAERA,QAEtB,OACI,qCACI,oBAAIL,UAAU,oCAAd,SAAmDhB,IAElDqB,GAAW,2CAEZ,qBAAKL,UAAU,WAAf,SAEIH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,c,OEoB3BiB,G,MAlCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHT,mBAAS,IAFN,mBAEhCU,EAFgC,KAEpBC,EAFoB,KAmBvC,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BP,GAAc,SAAAQ,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,cCmBhBG,G,YAnBM,WAAO,IAAD,EAEWtB,mBAAS,CAAC,cAFrB,mBAElBuB,EAFkB,KAENd,EAFM,KAIzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEIc,EAAWlC,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAASA,SAAUA,GAAeA,aChB9C4C,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5f498a34.chunk.js","sourcesContent":["export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=Pqt6FbLsz7CSsS6u9JjEmcoxwSF2tTiI`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\nimport '../stylesheets/GifGridItem.scss';\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img className='card__image' src={url} alt={title} />\r\n            <p className='card__text'>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem;","import { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\nimport '../stylesheets/GifGrid.scss';\r\n\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n\r\n            {loading && <p>Loading...</p>}\r\n\r\n            <div className='cardGrid'>\r\n                {\r\n                images.map(img => (\r\n                    <GifGridItem key={img.id} {...img} />\r\n                    ))\r\n            }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid;","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    }, [category])\r\n\r\n    return state;\r\n}","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../stylesheets/AddCategory.scss';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            // callback\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory; ","import React, { useState } from 'react';\nimport GifGrid from './components/GifGrid';\nimport AddCategory from \"./components/AddCategory\";\nimport './stylesheets/GifExpertApp.scss';\nimport './stylesheets/Reset.scss';\n\n\n\n\nconst GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['One Punch']);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <ol>\n        {\n          categories.map(category => (\n            <GifGrid category={category} key={category} />\n          ))\n        }\n      </ol>\n    </>\n  );\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}